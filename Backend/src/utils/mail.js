const nodemailer = require('nodemailer');

/* ---------- Transporter ---------- */
const transporter = nodemailer.createTransport({
  service: 'gmail',             // n·∫øu d√πng d·ªãch v·ª• kh√°c -> ƒë·ªïi
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

/* Test config ngay khi app kh·ªüi ƒë·ªông */
(async () => {
  try {
    await transporter.verify();
    console.log('[MAIL] Transporter verified');
  } catch (err) {
    console.error('[MAIL] Transporter ERROR:', err.message);
  }
})();

/* ---------- Helpers ---------- */
const sendReminderEmail = async (
  to,
  petName,
  appointmentInfo,
  petSpecies = 'Kh√¥ng x√°c ƒë·ªãnh',
  ownerName = 'Qu√Ω kh√°ch',
) => {
  if (!to || !to.includes('@')) throw new Error('Invalid email address');

  const html = `
    <div style="font-family: Arial, sans-serif; max-width:600px;margin:auto">
      <h2 style="color:#4a90e2">Nh·∫Øc nh·ªü l·ªãch t√°i kh√°m</h2>
      <p>K√≠nh g·ª≠i ${ownerName},</p>
      <p>ƒê√¢y l√† email nh·∫Øc nh·ªü v·ªÅ l·ªãch t√°i kh√°m s·∫Øp t·ªõi c·ªßa th√∫ c∆∞ng:</p>
      <div style="background:#f5f5f5;padding:15px;border-radius:5px;margin:20px 0">
        <p><strong>T√™n th√∫ c∆∞ng:</strong> ${petName}</p>
        <p><strong>Lo√†i:</strong> ${petSpecies}</p>
        <p><strong>Ng√†y t√°i kh√°m:</strong> ${appointmentInfo}</p>
      </div>
      <p>Vui l√≤ng ƒë∆∞a th√∫ c∆∞ng c·ªßa b·∫°n ƒë·∫øn kh√°m theo ƒë√∫ng l·ªãch h·∫πn.</p>
      <p>N·∫øu c·∫ßn thay ƒë·ªïi, h√£y li√™n h·ªá v·ªõi ch√∫ng t√¥i s·ªõm nh·∫•t.</p>
      <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© chƒÉm s√≥c th√∫ c∆∞ng</p>
    </div>
  `;

  const info = await transporter.sendMail({
    from   : process.env.EMAIL_USER,
    to,
    subject: `Nh·∫Øc nh·ªü: L·ªãch t√°i kh√°m c·ªßa ${petName}`,
    html,
  });

  return { success: true, messageId: info.messageId };
};

const sendSecurityWarningEmail = async (
  to,
  petName,
  ownerName = 'Qu√Ω kh√°ch',
  lockoutDuration = '12 gi·ªù'
) => {
  if (!to || !to.includes('@')) throw new Error('Invalid email address');

  const html = `
    <div style="font-family: Arial, sans-serif; max-width:600px;margin:auto">
      <h2 style="color:#e74c3c">‚ö†Ô∏è C·∫£nh b√°o b·∫£o m·∫≠t</h2>
      <p>K√≠nh g·ª≠i ${ownerName},</p>
      <p>Ch√∫ng t√¥i ph√°t hi·ªán c√≥ nhi·ªÅu l·∫ßn nh·∫≠p sai m√£ b·∫£o v·ªá cho h·ªì s∆° th√∫ c∆∞ng c·ªßa b·∫°n:</p>
      <div style="background:#f8d7da;padding:15px;border-radius:5px;margin:20px 0;border-left:4px solid #e74c3c">
        <p><strong>T√™n th√∫ c∆∞ng:</strong> ${petName}</p>
        <p><strong>Th·ªùi gian kh√≥a:</strong> ${lockoutDuration}</p>
        <p><strong>L√Ω do:</strong> Nh·∫≠p sai m√£ b·∫£o v·ªá qu√° 5 l·∫ßn</p>
      </div>
      <p><strong>ƒêi·ªÅu n√†y c√≥ th·ªÉ l√† d·∫•u hi·ªáu c·ªßa:</strong></p>
      <ul>
        <li>Ai ƒë√≥ ƒëang c·ªë g·∫Øng truy c·∫≠p tr√°i ph√©p v√†o h·ªì s∆° th√∫ c∆∞ng</li>
        <li>Th√∫ c∆∞ng c·ªßa b·∫°n c√≥ th·ªÉ b·ªã ng∆∞·ªùi kh√°c t√¨m th·∫•y v√† c·ªë g·∫Øng thay ƒë·ªïi th√¥ng tin</li>
      </ul>
      <p><strong>H√†nh ƒë·ªông khuy·∫øn ngh·ªã:</strong></p>
      <ul>
        <li>Ki·ªÉm tra xem th√∫ c∆∞ng c·ªßa b·∫°n c√≥ an to√†n kh√¥ng</li>
        <li>N·∫øu b·∫°n kh√¥ng ph·∫£i l√† ng∆∞·ªùi nh·∫≠p m√£, h√£y li√™n h·ªá ngay v·ªõi ch√∫ng t√¥i</li>
        <li>Sau ${lockoutDuration}, b·∫°n c√≥ th·ªÉ th·ª≠ nh·∫≠p m√£ b·∫£o v·ªá l·∫°i</li>
      </ul>
      <p style="color:#e74c3c"><strong>L∆∞u √Ω:</strong> N·∫øu kh√¥ng ph·∫£i b·∫°n th·ª±c hi·ªán, vui l√≤ng li√™n h·ªá ngay v·ªõi ƒë·ªôi h·ªó tr·ª£.</p>
      <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© b·∫£o m·∫≠t VNIPET</p>
    </div>
  `;

  const info = await transporter.sendMail({
    from   : process.env.EMAIL_USER,
    to,
    subject: `üö® C·∫£nh b√°o b·∫£o m·∫≠t: H·ªì s∆° ${petName} b·ªã kh√≥a`,
    html,
  });

  return { success: true, messageId: info.messageId };
};

const sendOTPEmail = async (
  to,
  otpCode,
  userName = 'Qu√Ω kh√°ch'
) => {
  if (!to || !to.includes('@')) throw new Error('Invalid email address');
  if (!otpCode) throw new Error('OTP code is required');

  const html = `
    <div style="font-family: Arial, sans-serif; max-width:600px;margin:auto; background:#f9f9f9; padding:20px; border-radius:10px;">
      <div style="background:white; padding:30px; border-radius:8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <div style="text-align:center; margin-bottom:30px;">
          <h1 style="color:#4a90e2; margin:0; font-size:28px;">üîê Kh√¥i ph·ª•c m·∫≠t kh·∫©u</h1>
        </div>
        
        <p style="font-size:16px; line-height:1.6; color:#333;">K√≠nh g·ª≠i ${userName},</p>
        
        <p style="font-size:16px; line-height:1.6; color:#333;">
          B·∫°n ƒë√£ y√™u c·∫ßu kh√¥i ph·ª•c m·∫≠t kh·∫©u cho t√†i kho·∫£n VNIPET c·ªßa m√¨nh. 
          Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c:
        </p>
        
        <div style="background:#f8f9fa; padding:25px; border-radius:8px; margin:25px 0; text-align:center; border-left:4px solid #4a90e2;">
          <p style="margin:0 0 10px 0; color:#666; font-size:14px;">M√£ OTP c·ªßa b·∫°n:</p>
          <h2 style="margin:0; color:#4a90e2; font-size:36px; letter-spacing:8px; font-weight:bold;">${otpCode}</h2>
        </div>
        
        <div style="background:#fff3cd; border:1px solid #ffeaa7; border-radius:6px; padding:15px; margin:20px 0;">
          <p style="margin:0; color:#856404; font-size:14px;">
            <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong><br>
            ‚Ä¢ M√£ OTP n√†y s·∫Ω h·∫øt h·∫°n sau <strong>10 ph√∫t</strong><br>
            ‚Ä¢ Ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng m√£ n√†y <strong>1 l·∫ßn</strong><br>
            ‚Ä¢ Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai
          </p>
        </div>
        
        <p style="font-size:14px; line-height:1.6; color:#666; margin-top:30px;">
          N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu kh√¥i ph·ª•c m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y v√† m·∫≠t kh·∫©u c·ªßa b·∫°n s·∫Ω kh√¥ng b·ªã thay ƒë·ªïi.
        </p>
        
        <hr style="border:none; border-top:1px solid #eee; margin:30px 0;">
        
        <p style="font-size:12px; color:#999; text-align:center; margin:0;">
          Tr√¢n tr·ªçng,<br>
          <strong style="color:#4a90e2;">ƒê·ªôi ng≈© VNIPET</strong><br>
          Email t·ª± ƒë·ªông - Vui l√≤ng kh√¥ng ph·∫£n h·ªìi
        </p>
      </div>
    </div>
  `;

  const info = await transporter.sendMail({
    from   : process.env.EMAIL_USER,
    to,
    subject: `üîê M√£ OTP kh√¥i ph·ª•c m·∫≠t kh·∫©u - ${otpCode}`,
    html,
  });

  return { success: true, messageId: info.messageId };
};

const testEmailConfig = async () => transporter.verify();

module.exports = { transporter, sendReminderEmail, sendSecurityWarningEmail, sendOTPEmail, testEmailConfig };
